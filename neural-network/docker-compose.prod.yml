version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: neural-network-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./web-interface:/usr/share/nginx/html
    depends_on:
      - neural-network-go
    restart: unless-stopped
    networks:
      - neural-network

  # Go API Gateway
  neural-network-go:
    build:
      context: ./go-service
      dockerfile: Dockerfile
    container_name: neural-network-go
    environment:
      - GIN_MODE=release
      - PORT=8090
      - PYTHON_API_URL=http://neural-network-python:8080
    depends_on:
      - neural-network-python
    restart: unless-stopped
    networks:
      - neural-network

  # Python Neural Network
  neural-network-python:
    build:
      context: .
      dockerfile: docker/python/Dockerfile
    container_name: neural-network-python
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://neural:password@postgres:5432/neural_db
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    command: ["python", "api_server.py"]
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - neural-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: neural-network-redis
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - neural-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: neural-network-postgres
    environment:
      - POSTGRES_DB=neural_db
      - POSTGRES_USER=neural
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - neural-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: neural-network-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - neural-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: neural-network-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - neural-network

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  neural-network:
    driver: bridge
