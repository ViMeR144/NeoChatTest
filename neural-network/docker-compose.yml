# Docker Compose for Neural Network System

services:
  # Core Neural Network (Python)
  neural-network-python:
    build:
      context: .
      dockerfile: docker/python/Dockerfile
    container_name: neural-network-python
    ports:
      - "8080:8080"
    environment:
      - PYTHONUNBUFFERED=1
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://neural:password@postgres:5432/neural_db
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    command: ["python", "api_server.py"]
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - neural-network

  # High-Performance Service (Rust)
  neural-network-rust:
    build:
      context: ./rust-service
      dockerfile: Dockerfile
    container_name: neural-network-rust
    ports:
      - "8080:8080"
    environment:
      - RUST_LOG=info
      - DATABASE_URL=postgresql://neural:password@postgres:5432/neural_db
      - REDIS_URL=redis://redis:6379
      - MODEL_SERVICE_URL=http://neural-network-python:8081
    depends_on:
      - redis
      - postgres
      - neural-network-python
    restart: unless-stopped
    networks:
      - neural-network

  # Load Balancer & API Gateway (Go)
  neural-network-go:
    build:
      context: ./go-service
      dockerfile: Dockerfile
    container_name: neural-network-go
    ports:
      - "8090:8090"
    environment:
      - GO_SERVICE_PORT=8090
      - LOAD_BALANCER_INSTANCES=neural-network-rust:8080,neural-network-python:8081
      - CIRCUIT_BREAKER_THRESHOLD=5
      - REDIS_URL=redis://redis:6379
    depends_on:
      - neural-network-rust
      - neural-network-python
      - redis
    restart: unless-stopped
    networks:
      - neural-network

  # Web Interface (TypeScript/Node.js)
  neural-network-web:
    build:
      context: ./web-interface
      dockerfile: Dockerfile
    container_name: neural-network-web
    ports:
      - "3000:80"
    environment:
      - VITE_API_BASE_URL=http://localhost:8090
      - VITE_WS_URL=ws://localhost:8090/ws
      - NODE_ENV=production
    depends_on:
      - neural-network-go
    restart: unless-stopped
    networks:
      - neural-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: neural-network-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - neural-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: neural-network-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=neural_db
      - POSTGRES_USER=neural
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - neural-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: neural-network-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - neural-network-web
      - neural-network-go
    restart: unless-stopped
    networks:
      - neural-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: neural-network-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - neural-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: neural-network-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - neural-network

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: neural-network-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - neural-network

  # Elasticsearch for Logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: neural-network-elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - neural-network

  # Kibana for Log Analysis
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: neural-network-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - neural-network

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: neural-network-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config:/usr/share/logstash/config
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - neural-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  neural-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

